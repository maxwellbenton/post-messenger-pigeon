class Store{constructor(){this._registry={},this._prefix=""}get prefix(){return this._prefix}set prefix(e){this._prefix=e}get registry(){return this._registry}register(e,s){this._registry[e]=s}unregister(e){delete this._registry[e]}isRegistered(e){return!!this._registry[e]}}class Messenger{constructor(){this._store=new Store,window.addEventListener("message",(async e=>{console.log("MESSAGE RECEIVED",e);const{data:s,origin:r,source:t}=e,o=JSON.parse(s);if(this.isRegistered(o.messageName)){let e;try{e=await this.store.registry[o.messageName]({origin:r,source:t,data:o}),console.log("END OF MESSAGE LISTENER CALLBACK",e)}catch(e){console.log("Error in callback",e)}}}))}createMessage(e,s,r){const t=JSON.stringify({messageName:e,...s&&Object.keys(s).length&&{data:s},...r&&{origin:r}});return console.log("CREATED MESSAGE",t),t}register(e,s){this._store.register(e,s)}unregister(e){this._store.unregister(e)}isRegistered(e){return this._store.isRegistered(e)}get registry(){this._store.registry}messagePrefix(){return this._store.prefix}get store(){return this._store}setMessagePrefix(e){this._store.prefix=e}async _listen(e,s,r,t=!0){const o=this.store.prefix+"."+e;let i,n;console.log("LISTENING",o,s);const g=new Promise(((i,g)=>{this.register(o,(async o=>{t&&this.unregister(e);const{data:g,origin:a,source:c}=o;if(!r?.domain||r.domain===a){if(console.log("CALLBACK",s),n=await s(g),console.log("CALLBACK RESULT",n),!g.messageName.endsWith(".acknowledged")){const e=this.createMessage(g.messageName+".acknowledged",n);this._broadcast(c,e,a)}t&&i(n)}}))})),a=new Promise(((e,s)=>{i=()=>{this.unregister(o),e()}}));return Object.assign(Promise.race([g,a]),{cancel:i})}bootstrap(e){this.setMessagePrefix(e),this._listen("handshake",(e=>{console.log("INSIDE HANDSHAKE CALLBACK",e);const s=e?.data?.messageName;return{messageName:s,registered:this.isRegistered(s)}}),{},!1)}_broadcast(e,s,r){console.log("BROADCASTING",s,r),e.postMessage(s,r)}on(e,s={},r=(e=>e)){if(!e)throw new Error("Message name is required");return this._listen(e,r,s,!1)}async once(e,s={},r=(e=>e)){if(!e)throw new Error("Message name is required");return this._listen(e,r,s,!0)}async send(e,s,r){if(!e)throw new Error("Message name is required");const t=this.store.prefix,o=t+"."+e;console.log("STARTING SEND",o,s,r);let i=new Promise(((i,n)=>{s?.timeout&&setTimeout((()=>n(new Error("Timeout"))),s.timeout),this._listen("handshake.acknowledged",(e=>e),{window:window.parent},!0).then((t=>{if(console.log("HANDSHAKE ACKNOWLEDGED",t),!t?.data?.registered)throw new Error(`No listener registered for ${o}`);{this._listen(e+".acknowledged",(e=>e),s,!0).then((e=>{console.log("MESSAGE ACKNOWLEDGED",e),i(e)}));const t=this.createMessage(o,r);console.log("SENDING MESSAGE",t),this._broadcast(s.window,t,s.origin)}}));const g=this.createMessage(t+".handshake",{messageName:o});console.log("SENDING HANDSHAKE",g),this._broadcast(s.window,g,s.origin)}));return await i}}const messenger=new Messenger,PostMessengerPigeon={bootstrap:messenger.bootstrap,on:messenger.on,once:messenger.once,send:messenger.send};window.PostMessengerPigeon=PostMessengerPigeon,console.log("EXPORTING",PostMessengerPigeon),modules.exports=PostMessengerPigeon;
